function saveMeshInp(mesh,fname)
%write an inp file for abaqus
%
%   saveMeshInp(mesh,fname)
%   -----------------------
%
%   Inputs:
%       >   mesh : structure data describing the mesh
%                  mesh.coord : node coordinates
%                  mesh.conn : connectivity matrix
%                  mesh.setL : element label
%                  mesh.type : element type (C3D8 / C3D20)
%                  mesh.setNameLabel : name-label of element set
%                  mesh.elOrient : components of the two orientation vectors
%                                  defining the material anisotropy
%       > fname : file name in which the data will be saved
%
%   Outputs: *.inp file in fname
%
%

%fname = 'savemeshtmp.inp';
jobName = 'job-1';
modelName = 'model-1';
partName = 'PART-1';
assName = 'Assembly';

coordSyst = 'RECTANGULAR'; %Cartesian coordinate system (see abaqus doc)

nsetName = strings(3,1);
nsetName(1) = 'RP'; %node at the middle point of XY-plane at Z=Zmax
nsetName(2) = 'Z1'; %node list at Z=Zmin
nsetName(3) = 'Z2'; %node list at Z=Zmax
% compute the middle point of XY-plane at Z=Zmax
nodeRP = [mesh.dimN(1:2)./2,mesh.dimN(3)];
% generate node list in XY-plane at Z=Zmin: nodeZ = [n_first, n_last, inc]
nodeZ1 = [1, prod(mesh.dimN(1:2)), 1];
% genearte node list in XY-plane at Z=Zmax: nodeZ = [n_first, n_last, inc]
nodeZ2 = [prod(mesh.dimN(1:2))*(mesh.dimN(3)-1)+1, prod(mesh.dimN), 1];


% ninc = 10000; %max number of increments in a step
% dt = 0.1;
% T = 1;
% dtmin = 1e-05;
% dtmax = T;
% 
% uz = 70.; %axial load
% freqRestart = 0;
% freqOutput = 0;


%
orientName = ['Ori-',partName,'-DISTORIENT'];
insName = [partName,'-1'];
distName = [partName,'-DISTORIENT'];
distTabName = [partName,'-DISTORIENT','-Table'];
%
nn = size(mesh.coord,1);

disp(['writing inp-file: ',fname])

fid = fopen(fname,'w');

% Heading -----------------------------------------------------------------
fprintf(fid, '%s\r\n', '*Heading');
fprintf(fid, '%s\r\n', ['** Job name: ',jobName,' Model name: ',modelName]);
fprintf(fid, '%s\r\n', '** Generated by: Matlab Code YC');
fprintf(fid, '%s\r\n', '* Preprint, echo=NO, model=NO, history=NO, contact=NO');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '** PARTS');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', ['*Part, name=',partName]);

% Node --------------------------------------------------------------------
fprintf(fid, '%s\r\n', '*Node');
fprintf(fid, '%d,  %12.8e,  %12.8e,  %12.8e\r\n', [[1:nn]',mesh.coord]');

% Connectivity ------------------------------------------------------------
fprintf(fid, '%s\r\n', ['*Element, type=',mesh.type]);
switch mesh.type
    case 'C3D8'
        fprintf(fid, '%d, %d, %d, %d, %d, %d, %d, %d, %d\r\n', mesh.conn');
    case 'C3D20'
        fprintf(fid, ['%d, %d, %d, %d, %d, %d, %d, %d', ...
                      '%d, %d, %d, %d, %d, %d, %d, %d', ...
                      '%d, %d, %d, %d, %d\r\n'], mesh.conn');
end

% Element set -------------------------------------------------------------
setNameLabel = strsplit(mesh.setNameLabel,';');
setNameLabel = setNameLabel(1:end-1);
nsets = length(setNameLabel);
setN = extractBefore(setNameLabel,'-');
setL = str2double( extractAfter(setNameLabel,'-') );
for i = 1:nsets
    fprintf(fid, '%s\r\n', strcat('*Elset, elset=',setN{i}));
    fprintf(fid, '%d\r\n', find(mesh.setL==setL(i)));
end

% Orientation -------------------------------------------------------------
fprintf(fid, '%s\r\n', ['*Orientation, name=',orientName...
                        ', system=',coordSyst]);
fprintf(fid, '%s\r\n', distName);
fprintf(fid, '%d, %6.1f\r\n', 1, 0.); %? what is this ?

% Section -----------------------------------------------------------------
for i=1:nsets
    fprintf(fid, '%s\r\n', strcat('** Section: Section-1-',setN{i}));
    fprintf(fid, '%s\r\n', strcat('*Solid Section, elset=',setN{i},...
                                  ', orientation=',orientName,...
                                  ', material=',setN{i}));
    fprintf(fid, ',\r\n');
end

% Distribution table for orientation vectors ------------------------------
fprintf(fid, '%s\r\n', strcat('*Distribution, name=',distName,...
                              ', location=ELEMENT',...
                              ', Table=',distTabName));
fprintf(fid, ', %1.7f, %1.7f, %1.7f, %1.7f, %1.7f, %1.7f\r\n', ...
                1, 0, 0, 0, 1, 0);
fprintf(fid, '%d, %1.7f, %1.7f, %1.7f, %1.7f, %1.7f, %1.7f\r\n',...
              [double(mesh.conn(:,1)),mesh.elOrient]');

fprintf(fid, '%s\r\n', '*End Part');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '**');

disp('inp-file writing finished')

% Assembly ----------------------------------------------------------------
fprintf(fid, '%s\r\n', '**ASSEMBLY');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', ['*Assembly, name=',assName]);
fprintf(fid, '%s\r\n', '**');
% Instance
fprintf(fid, '%s\r\n', ['*Instance, name=',insName,', part=',partName]);
fprintf(fid, '%s\r\n',  '*End Instance');
fprintf(fid, '%s\r\n', '**');
% Node
fprintf(fid, '%s\r\n', '*Node');
fprintf(fid, '%d, %6.6f, %6.6f, %6.6f\r\n', [1;nodeRP(:)]);
fprintf(fid, '%s\r\n', strcat('*Nset, nset=',nsetName(1)));
fprintf(fid, '%d\r\n', 1);
fprintf(fid, '%s\r\n', strcat('*Nset, nset=',nsetName(2),...
                              ' instance=',insName,', generate'));
fprintf(fid, '%d, %d, %d\r\n', nodeZ1);
fprintf(fid, '%s\r\n', strcat('*Nset, nset=',nsetName(3),...
                              ' instance=',insName,', generate'));
fprintf(fid, '%d, %d, %d\r\n', nodeZ2);
% Constraint
fprintf(fid, '%s\r\n', '** Constraint: Constraint-1');
fprintf(fid, '%s\r\n', '*Equation');
fprintf(fid, '%d\r\n', 2); %number of terms in the equation
fprintf(fid, '%s, %d, %12.6f, %s, %d, %12.6f\r\n', ...
             nsetName(2), 3, 1., nsetName(1), 3, -1.); %attach the RP to Z1
fprintf(fid, '%s\r\n', '*End Assembly');
fprintf(fid, '%s\r\n', '**');

% Materials ---------------------------------------------------------------
fprintf(fid, '%s\r\n', '** MATERIALS');
fprintf(fid, '%s\r\n', '**');
for i=1:nsets
    fprintf(fid, '%s\r\n', strcat('*Material, name=',setN(i)));
    fprintf(fid, '%s\r\n', '*Depvar');
    fprintf(fid, '%d\r\n', 30); %why 30 ?
    fprintf(fid, '%s%d\r\n', '*User Material, constants=', 1); %why 1 ?
    fprintf(fid, '%12.6f\r\n', 0.); %why 0?
end
fprintf(fid, '%s\r\n', ['*Distribution Table, name=',distTabName]);
fprintf(fid, '%s\r\n', 'coord3d, coord3d');
fprintf(fid, '%s\r\n', '**');

% Boundary conditions -----------------------------------------------------
fprintf(fid, '%s\r\n', '** BOUNDARY CONDITIONS');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '** Name: BC-1 Type: Displacement/Rotation');
fprintf(fid, '%s\r\n', '*Boundary');
fprintf(fid, '%s, %d, %d\r\n', nsetName(2), 3, 3); %fix the u3 of Z1 nodes
fprintf(fid, '%s\r\n', ...
'** ----------------------------------------------------------------');

% Step --------------------------------------------------------------------
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '** STEP : step_ez'); %epsilon_zz
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s%d\r\n', '*Step, name=step_ez, nlgeom=NO, inc=',ninc);
fprintf(fid, '%s\r\n', '*Static');
fprintf(fid, '%6.6f, %12.6f, %3.2e, %12.6f\r\n', dt, T, dtmin, dtmax);
fprintf(fid, '%s\r\n', '**');
% boundary condition (loading)
fprintf(fid, '%s\r\n', '** BOUNDARY CONDITIONS');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '** Name: BC-2 Type: Displacement/Rotation');
fprintf(fid, '%s\r\n', '*Boundary');
fprintf(fid, '%s, %d, %d, %12.6f\r\n', nsetName(1), 3, 3, uz); %axial load
fprintf(fid, '%s\r\n', '**');

% Output requsts ----------------------------------------------------------
fprintf(fid, '%s\r\n', '** OUTPUT REQUESTS');
fprintf(fid, '%s\r\n', '**');
% restart write
fprintf(fid, '%s%d\r\n', '*Restart, write, frequency=',freqRestart);
fprintf(fid, '%s\r\n', '**');
% field output - 2
fprintf(fid, '%s\r\n', '** FIELD OUTPUT: F-Output-2');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '*Output, field');
fprintf(fid, '%s%s\r\n', ['*Node Output, nset=',nsetName(1)]); %output nodal info of RP
fprintf(fid, '%s\r\n', 'RT'); %reaction forces
fprintf(fid, '%s\r\n', '**');
% field output - 1
fprintf(fid, '%s\r\n', '** FIELD OUTPUT: F-Output-1');
fprintf(fid, '%s\r\n', '**');
fprintf(fid, '%s\r\n', '*Output, field, variable=PRESELECT');
fprintf(fid, '%s%d\r\n', '*Output, history, frequency=',freqOutput);
fprintf(fid, '%s\r\n', '*End Step');

fclose(fid);
